Pure functional is better, will use parallel threads to compensate for speed penalty
Arrays of bytes are smaller and should form the interface
Class structure wont be stored, we'll use the natural ordering

Structure is thus:

Table of Types
==============
index starts at 0
index (implied by order) - Type (String null terminated) - serial code

Table of Objects
===============
-1 reference is null
Table starts at 0
0 is root object
1> is sub objects
index (implied by order) - Type reference (short)

Stream of objects
================
Objects one after the other
Object = declared fields* - in natural order, child first

Fields
-------
String = length, bytes as UTF-8
byte/short/int/long/float/double/char/boolean = bytes needed
Object Reference = int into table of objects | -1 for null

Future scope
==============
Refactor the Deserialisation process so that objects can be done in parallel rather than serially
Improve performance of index lookup and object index lookup in ObjectIndex
Add parallel execution to the serialisation process to speed it up

Special cases on interface - null, primitives
null is dealt with by empty result, primitives punting until later
